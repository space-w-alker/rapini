import ts from "typescript";

export const RAPINI_MUTATION_ID = "useRapiniMutation";

export function makeRapiniMutation() {
  const makeForwardingHandler = (
    name: "onSuccess" | "onError" | "onSettled"
  ) => {
    return ts.factory.createPropertyAssignment(
      ts.factory.createIdentifier(name),
      ts.factory.createArrowFunction(
        undefined,
        undefined,
        [
          ts.factory.createParameterDeclaration(
            undefined,
            ts.factory.createToken(ts.SyntaxKind.DotDotDotToken),
            ts.factory.createIdentifier("args"),
            undefined,
            undefined,
            undefined
          ),
        ],
        undefined,
        ts.factory.createToken(ts.SyntaxKind.EqualsGreaterThanToken),
        ts.factory.createBlock(
          [
            ts.factory.createExpressionStatement(
              ts.factory.createCallChain(
                ts.factory.createPropertyAccessChain(
                  ts.factory.createIdentifier("conf"),
                  ts.factory.createToken(ts.SyntaxKind.QuestionDotToken),
                  ts.factory.createIdentifier(name)
                ),
                ts.factory.createToken(ts.SyntaxKind.QuestionDotToken),
                undefined,
                [
                  ts.factory.createSpreadElement(
                    ts.factory.createIdentifier("args")
                  ),
                ]
              )
            ),
            ts.factory.createExpressionStatement(
              ts.factory.createCallChain(
                ts.factory.createIdentifier(name),
                ts.factory.createToken(ts.SyntaxKind.QuestionDotToken),
                undefined,
                [
                  ts.factory.createSpreadElement(
                    ts.factory.createIdentifier("args")
                  ),
                ]
              )
            ),
          ],
          true
        )
      )
    );
  };
  const forwardingHandlers = ["onSuccess", "onError", "onSettled"].map(
    (handler) => makeForwardingHandler(handler as "onSuccess" | "onError" | "onSettled")
  );
  return ts.factory.createFunctionDeclaration(
    undefined,
    undefined,
    ts.factory.createIdentifier(RAPINI_MUTATION_ID),
    [
      ts.factory.createTypeParameterDeclaration(
        undefined,
        ts.factory.createIdentifier("TData"),
        undefined,
        ts.factory.createKeywordTypeNode(ts.SyntaxKind.UnknownKeyword)
      ),
      ts.factory.createTypeParameterDeclaration(
        undefined,
        ts.factory.createIdentifier("TError"),
        undefined,
        ts.factory.createKeywordTypeNode(ts.SyntaxKind.UnknownKeyword)
      ),
      ts.factory.createTypeParameterDeclaration(
        undefined,
        ts.factory.createIdentifier("TVariables"),
        undefined,
        ts.factory.createKeywordTypeNode(ts.SyntaxKind.VoidKeyword)
      ),
      ts.factory.createTypeParameterDeclaration(
        undefined,
        ts.factory.createIdentifier("TOnMutateResult"),
        undefined,
        ts.factory.createKeywordTypeNode(ts.SyntaxKind.UnknownKeyword)
      ),
    ],
    [
      ts.factory.createParameterDeclaration(
        undefined,
        undefined,
        ts.factory.createIdentifier("mutationFn"),
        undefined,
        ts.factory.createTypeReferenceNode(
          ts.factory.createIdentifier("MutationFunction"),
          [
            ts.factory.createTypeReferenceNode(
              ts.factory.createIdentifier("TData"),
              undefined
            ),
            ts.factory.createTypeReferenceNode(
              ts.factory.createIdentifier("TVariables"),
              undefined
            ),
          ]
        ),
        undefined
      ),
      ts.factory.createParameterDeclaration(
        undefined,
        undefined,
        ts.factory.createIdentifier("config"),
        ts.factory.createToken(ts.SyntaxKind.QuestionToken),
        ts.factory.createFunctionTypeNode(
          undefined,
          [
            ts.factory.createParameterDeclaration(
              undefined,
              undefined,
              ts.factory.createIdentifier("queryClient"),
              undefined,
              ts.factory.createTypeReferenceNode(
                ts.factory.createIdentifier("QueryClient"),
                undefined
              ),
              undefined
            ),
          ],
          ts.factory.createTypeReferenceNode(
            ts.factory.createIdentifier("Pick"),
            [
              ts.factory.createTypeReferenceNode(
                ts.factory.createIdentifier("UseMutationOptions"),
                [
                  ts.factory.createTypeReferenceNode(
                    ts.factory.createIdentifier("TData"),
                    undefined
                  ),
                  ts.factory.createTypeReferenceNode(
                    ts.factory.createIdentifier("TError"),
                    undefined
                  ),
                  ts.factory.createTypeReferenceNode(
                    ts.factory.createIdentifier("TVariables"),
                    undefined
                  ),
                  ts.factory.createTypeReferenceNode(
                    ts.factory.createIdentifier("TOnMutateResult"),
                    undefined
                  ),
                ]
              ),
              ts.factory.createUnionTypeNode([
                ts.factory.createLiteralTypeNode(
                  ts.factory.createStringLiteral("onSuccess")
                ),
                ts.factory.createLiteralTypeNode(
                  ts.factory.createStringLiteral("onSettled")
                ),
                ts.factory.createLiteralTypeNode(
                  ts.factory.createStringLiteral("onError")
                ),
              ]),
            ]
          )
        ),
        undefined
      ),
      ts.factory.createParameterDeclaration(
        undefined,
        undefined,
        ts.factory.createIdentifier("options"),
        ts.factory.createToken(ts.SyntaxKind.QuestionToken),
        ts.factory.createTypeReferenceNode(
          ts.factory.createIdentifier("Omit"),
          [
            ts.factory.createTypeReferenceNode(
              ts.factory.createIdentifier("UseMutationOptions"),
              [
                ts.factory.createTypeReferenceNode(
                  ts.factory.createIdentifier("TData"),
                  undefined
                ),
                ts.factory.createTypeReferenceNode(
                  ts.factory.createIdentifier("TError"),
                  undefined
                ),
                ts.factory.createTypeReferenceNode(
                  ts.factory.createIdentifier("TVariables"),
                  undefined
                ),
                ts.factory.createTypeReferenceNode(
                  ts.factory.createIdentifier("TOnMutateResult"),
                  undefined
                ),
              ]
            ),
            ts.factory.createLiteralTypeNode(
              ts.factory.createStringLiteral("mutationFn")
            ),
          ]
        ),
        undefined
      ),
    ],
    ts.factory.createTypeReferenceNode(
      ts.factory.createIdentifier("UseMutationResult"),
      [
        ts.factory.createTypeReferenceNode(
          ts.factory.createIdentifier("TData"),
          undefined
        ),
        ts.factory.createTypeReferenceNode(
          ts.factory.createIdentifier("TError"),
          undefined
        ),
        ts.factory.createTypeReferenceNode(
          ts.factory.createIdentifier("TVariables"),
          undefined
        ),
        ts.factory.createTypeReferenceNode(
          ts.factory.createIdentifier("TOnMutateResult"),
          undefined
        ),
      ]
    ),
    ts.factory.createBlock(
      [
        ts.factory.createVariableStatement(
          undefined,
          ts.factory.createVariableDeclarationList(
            [
              ts.factory.createVariableDeclaration(
                ts.factory.createObjectBindingPattern([
                  ts.factory.createBindingElement(
                    undefined,
                    undefined,
                    ts.factory.createIdentifier("onSuccess"),
                    undefined
                  ),
                  ts.factory.createBindingElement(
                    undefined,
                    undefined,
                    ts.factory.createIdentifier("onError"),
                    undefined
                  ),
                  ts.factory.createBindingElement(
                    undefined,
                    undefined,
                    ts.factory.createIdentifier("onSettled"),
                    undefined
                  ),
                  ts.factory.createBindingElement(
                    ts.factory.createToken(ts.SyntaxKind.DotDotDotToken),
                    undefined,
                    ts.factory.createIdentifier("rest"),
                    undefined
                  ),
                ]),
                undefined,
                undefined,
                ts.factory.createBinaryExpression(
                  ts.factory.createIdentifier("options"),
                  ts.factory.createToken(ts.SyntaxKind.QuestionQuestionToken),
                  ts.factory.createObjectLiteralExpression([], false)
                )
              ),
            ],
            ts.NodeFlags.Const
          )
        ),
        ts.factory.createVariableStatement(
          undefined,
          ts.factory.createVariableDeclarationList(
            [
              ts.factory.createVariableDeclaration(
                ts.factory.createIdentifier("queryClient"),
                undefined,
                undefined,
                ts.factory.createCallExpression(
                  ts.factory.createIdentifier("useQueryClient"),
                  undefined,
                  []
                )
              ),
            ],
            ts.NodeFlags.Const
          )
        ),
        ts.factory.createVariableStatement(
          undefined,
          ts.factory.createVariableDeclarationList(
            [
              ts.factory.createVariableDeclaration(
                ts.factory.createIdentifier("conf"),
                undefined,
                undefined,
                ts.factory.createCallChain(
                  ts.factory.createIdentifier("config"),
                  ts.factory.createToken(ts.SyntaxKind.QuestionDotToken),
                  undefined,
                  [ts.factory.createIdentifier("queryClient")]
                )
              ),
            ],
            ts.NodeFlags.Const
          )
        ),
        ts.factory.createVariableStatement(
          undefined,
          ts.factory.createVariableDeclarationList(
            [
              ts.factory.createVariableDeclaration(
                ts.factory.createIdentifier("mutationOptions"),
                undefined,
                ts.factory.createTypeQueryNode(
                  ts.factory.createIdentifier("options"),
                  undefined
                ),
                ts.factory.createObjectLiteralExpression(
                  [
                    ...forwardingHandlers,
                    ts.factory.createSpreadAssignment(
                      ts.factory.createIdentifier("rest")
                    ),
                  ],
                  true
                )
              ),
            ],
            ts.NodeFlags.Const
          )
        ),
        ts.factory.createReturnStatement(
          ts.factory.createCallExpression(
            ts.factory.createIdentifier("useMutation"),
            undefined,
            [
              ts.factory.createObjectLiteralExpression(
                [
                  ts.factory.createShorthandPropertyAssignment(
                    ts.factory.createIdentifier("mutationFn"),
                    undefined
                  ),
                  ts.factory.createSpreadAssignment(
                    ts.factory.createIdentifier("mutationOptions")
                  ),
                ],
                false
              ),
            ]
          )
        ),
      ],
      true
    )
  );
}
